$OpenBSD$
--- lib/WWW/YoutubeViewer.pm.orig	Fri Aug 31 16:11:37 2012
+++ lib/WWW/YoutubeViewer.pm	Fri Nov  2 22:27:52 2012
@@ -13,11 +13,11 @@ WWW::YoutubeViewer - A very easy interface to YouTube.
 
 =head1 VERSION
 
-Version 0.01
+Version 0.02
 
 =cut
 
-our $VERSION = '0.01';
+our $VERSION = '0.02';
 
 =head1 SYNOPSIS
 
@@ -41,11 +41,13 @@ our @region_IDs = qw(
   IT JP MX NL NZ PL RU ZA KR ES SE TW US
   );
 
+our @feed_methods = qw(newsubscriptionvideos recommendations favorites watch_history);
+
 my %valid_options = (
 
     # Main options
     v           => {valid => [],                                         default => 2},
-    page        => {valid => [qr/^(\d+)(?(?{$1==0})(?!))$/],             default => 1},
+    page        => {valid => [qr/^(?!0+\z)\d+\z/],                       default => 1},
     results     => {valid => [1 .. 50],                                  default => 10},
     hd          => {valid => [qw(true)],                                 default => undef},
     caption     => {valid => [qw(true false)],                           default => undef},
@@ -57,17 +59,17 @@ my %valid_options = (
     safe_search => {valid => [qw(strict moderate none)],                 default => undef},
 
     # Others
-    lwp_timeout => {valid => [qr/^\d+$/], default => 60},
-    author      => {valid => [qr/^\w+$/], default => undef},
-    auth_key    => {valid => [qr/^.{5}/], default => undef},
-    key         => {valid => [qr/^.{5}/], default => undef},
-    app_version => {valid => [qr/^\d/],   default => $VERSION},
-    app_name    => {valid => [qr/^./],    default => 'Youtube Viewer'},
+    debug       => {valid => [0 .. 2],                        default => 0},
+    lwp_timeout => {valid => [qr/^\d+$/],                     default => 60},
+    auth_key    => {valid => [qr/^.{5}/],                     default => undef},
+    key         => {valid => [qr/^.{5}/],                     default => undef},
+    author      => {valid => [qr{^(?:\w+(?:[-.]++\w++)*)\z}], default => undef},
+    app_version => {valid => [qr/^\d/],                       default => $VERSION},
+    app_name    => {valid => [qr/^./],                        default => 'Youtube Viewer'},
 
-    categories_language => {valid => [qr/^[a-z]++-\w+/], default => 'en-US'},
+    categories_language => {valid => [qr/^[a-z]++-\w/], default => 'en-US'},
 
     # Booleans
-    debug          => {valid => [1, 0], default => 0},
     lwp_keep_alive => {valid => [1, 0], default => 1},
     lwp_env_proxy  => {valid => [1, 0], default => 1},
     escape_utf8    => {valid => [1, 0], default => 0},
@@ -135,7 +137,6 @@ sub set_prefer_https {
         eval { require LWP::Protocol::https };
         if ($@) {
             warn "[!] LWP::Protocol::https is not installed!\n";
-            return;
         }
         foreach my $key (grep /_url\z/, keys %valid_options) {
             my $url = $valid_options{$key}{default};
@@ -292,14 +293,13 @@ sub lwp_get {
 
     my %lwp_header = $self->_get_lwp_header();
 
-    undef $self->{last_lwp_error};
     my $response = $self->{lwp}->get($url, %lwp_header);
 
     if ($response->is_success) {
         return $response->content;
     }
     else {
-        warn '[' . ($self->{last_lwp_error} = $response->status_line()) . "] Error occured on URL: $url\n";
+        warn '[' . $response->status_line() . "] Error occured on URL: $url\n";
     }
 
     return;
@@ -330,7 +330,7 @@ sub get_content {
     my ($self, $url, %opts) = @_;
 
     my $hash;
-    eval { $hash = xml2hash($self->lwp_get($url)) // return undef; 1 };
+    eval { $hash = xml2hash($self->lwp_get($url) // return []) // return [] };
 
     if ($@) {
         if ($@ =~ /^Can't locate (\S+)\.pm\b/) {
@@ -340,13 +340,13 @@ Error: Module $module is required.
 To install it, just execute the following command:
     cpan -i $module
 ERROR
-            return undef;
+            return [];
         }
         warn "XML::Fast: Error occured while parsing the XML content of: $url\n";
-        return undef;
+        return [];
     }
 
-    if ($self->get_debug) {
+    if ($self->get_debug == 2) {
         require Data::Dump;
         Data::Dump::pp($hash);
     }
@@ -367,18 +367,21 @@ ERROR
           ? {
              playlistID => $gdata->{'yt:playlistId'},
              title      => $gdata->{'title'},
+             name       => $gdata->{'author'}{'name'},
              author     => ($gdata->{'author'}{'uri'} =~ m{^.*/([^/]+)}),
              count      => $gdata->{'yt:countHint'},
              summary    => $gdata->{'summary'},
              published  => $gdata->{'published'},
              updated    => $gdata->{'updated'},
+             thumbnail  => $gdata->{'media:group'}{'media:thumbnail'}[0]{'-url'},
             }
 
           : $opts{comments}
 
           # Comments
           ? {
-             author    => $gdata->{'author'}{'name'},
+             name      => $gdata->{'author'}{'name'},
+             author    => ($gdata->{'author'}{'uri'} =~ m{^.*/([^/]+)}),
              content   => $gdata->{'content'},
              published => $gdata->{'published'},
             }
@@ -388,7 +391,8 @@ ERROR
           # Channels
           ? {
              title       => $gdata->{'title'},
-             author      => $gdata->{'author'}{'name'},
+             name        => $gdata->{'author'}{'name'},
+             author      => ($gdata->{'author'}{'uri'} =~ m{^.*/([^/]+)}),
              summary     => $gdata->{'summary'},
              thumbnail   => $gdata->{'media:thumbnail'}{'-url'},
              updated     => $gdata->{'updated'},
@@ -400,6 +404,7 @@ ERROR
           : {
              videoID     => $gdata->{'media:group'}{'yt:videoid'},
              title       => $gdata->{'media:group'}{'media:title'}{'#text'},
+             name        => $gdata->{'author'}{'name'},
              author      => ($gdata->{'author'}{'uri'} =~ m{^.*/([^/]+)}),
              rating      => $gdata->{'gd:rating'}{'-average'} || 0,
              likes       => $gdata->{'yt:rating'}{'-numLikes'} || 0,
@@ -605,7 +610,7 @@ sub _get_pairs_from_info_data {
 
     foreach my $block (split(/,/, $content)) {
         foreach my $pair (split(/&/, $block)) {
-            $pair =~ s{^url_encoded_fmt_stream_map=(?=url=)}{}im;
+            $pair =~ s{^url_encoded_fmt_stream_map=(?=\w+=)}{}im;
             my ($key, $value) = split(/=/, $pair);
             next unless defined $key;
             $array[$i]->{$key} = uri_unescape($value);
@@ -613,6 +618,12 @@ sub _get_pairs_from_info_data {
         ++$i;
     }
 
+    foreach my $hash_ref (@array) {
+        if (exists $hash_ref->{url} and exists $hash_ref->{sig}) {
+            $hash_ref->{url} .= "&signature=$hash_ref->{sig}";
+        }
+    }
+
     return @array;
 }
 
@@ -624,6 +635,11 @@ sub get_streaming_urls {
     my $content = uri_unescape($self->lwp_get($url) // return);
     my @info = $self->_get_pairs_from_info_data($content);
 
+    if ($self->get_debug == 2) {
+        require Data::Dump;
+        Data::Dump::pp(\@info);
+    }
+
     if (exists $info[0]{status} and $info[0]->{status} eq q{fail}) {
         warn "\n[!] Error occurred on getting info for video ID: $videoID\n";
         my $reason = $info[0]->{reason};
@@ -897,7 +913,7 @@ sub get_video_info {
     }
 
     # Create subroutines that require authentication
-    foreach my $method (qw(newsubscriptionvideos recommendations favorites watch_history)) {
+    foreach my $method (@feed_methods) {
 
         *{__PACKAGE__ . '::get_' . $method} = sub {
 
@@ -956,7 +972,7 @@ Favorite a video. Returns true on success.
 
 =item full_gdata_arguments()
 
-Returns a string with all GData arguments.
+Returns a string with all the GData arguments.
 
 =item get_app_name()
 
@@ -998,6 +1014,7 @@ Returns the category value.
 
 Return a hash reference containing the URL and RESULTS:
     {url => '...', results => [...]}
+
 Valid %opts:
     playlists => 1, comments => 1, videos => 1, channels => 1
 
@@ -1019,7 +1036,7 @@ Returns the latest favorited videos by a username.
 
 =item get_favorites(;$user)
 
-Returns the latest favorited videos, for the current logged user.
+Returns the latest favorited videos for the current logged user.
 
 =item get_feeds_url()
 
@@ -1273,7 +1290,7 @@ Set a category value. (ex: 'Music')
 
 =item set_debug($bool)
 
-Set the debug mode. 1 for true.
+Set the debug level. (available: 0, 1, 2)
 
 =item set_duration($duration_id)
 
